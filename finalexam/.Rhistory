choices = c(
"Age" = "Age",
"Height" = "Height_i",
"Weight" = "Weight",
"Salary" = "Salary",
"Points" = "Points",
"Assists" = "Assists"
),
selected = "Height_i"
)
),
mainPanel(
tabBox(width = 12,
tabPanel("Summary", verbatimTextOutput("mysummary")),
tabPanel("Piechart", plotlyOutput("pieChart")),
tabPanel("Data", DT::dataTableOutput("data"),style = "height:500px; overflow-y: scroll;overflow-x: scroll;")
)
))
),
tabItem(tabName = "DetailAnalysis1",
fluidRow(
plotlyOutput("barchart")
)
),
tabItem(tabName = "DetailAnalysis2"
),
tabItem(tabName = "DetailAnalysis3"
)
)
)
)
)
server <- function(input, output) {
dt=read.csv("D:\\Dataset\\players.csv")
#PreProcess
dt$College[which(dt$College=="")] <- "Unknow"
dt$Salary[which(is.na(dt$Salary))] = mean(dt$Salary, na.rm=T)
dt$Salary<-format(round(dt$Salary, 0))
dt$Points[which(is.na(dt$Points))] <- mean(dt$Points, na.rm=T)
dt$Points<-format(round(dt$Points, 2))
dt$Rebounds[which(is.na(dt$Rebounds))] <-mean(dt$Rebounds, na.rm=T)
dt$Rebounds<-format(round(dt$Rebounds, 2))
dt$Assists[which(is.na(dt$Assists))] <- mean(dt$Assists, na.rm=T)
dt$Assists<-format(round(dt$Assists, 2))
#Add Column
dt$Height_cm <-(dt$Height_i*30.48)
dt$Height_cm<-format(round(dt$Height_cm, 0))
dt$Weight_kg <- (dt$Weight*0.45359237)
dt$Weight_kg<-format(round(dt$Weight_kg, 0))
#factor
x<-factor(dt$Team)
xPosition <- factor(dt$Position)
xAge <- factor(dt$Age)
summary(dt$Height_cm)
#all-Team
output$all_mysummary = renderPrint({
test <- dt[dt$Position == input$position,]
summary(test[, input$all_characterstic][test$Age == input$age])
})
output$table <- renderDataTable({
datatable(cbind(dt))
})
output$all_pieChart <- renderPlotly({
test <- dt[dt$Position == input$position,]
x1 <- factor(test[,input$all_characterstic][test$Age == input$age])
varicount <- reactive(
summary(x1)
)
pie_data <- data.frame(
Categorie = levels(x1),
Count = varicount()
)
plot_ly(
pie_data,
labels =  ~ Categorie,
values =  ~ Count,
type = 'pie'
)
})
output$Histogram <- renderPlot({
hist(dt$Age, breaks =  input$bins)
})
output$all_Player <- renderValueBox({
valueBox(
length(dt$Name), "Player", icon = icon("user"),
color = "aqua"
)
})
output$all_Team <- renderValueBox({
valueBox(
length(table(dt$Team)), "Team", icon = icon("user-friends"),
color = "light-blue"
)
})
output$all_Salary <- renderValueBox({
valueBox(
paste0(max(dt$Salary)," $"), "Highest salary ", icon = icon("money-bill-alt"),
color = "yellow"
)
})
output$all_Age <- renderValueBox({
valueBox(
paste0(max(dt$Age),"-year-old"), "Oldest player", icon = icon("calendar"),
color = "orange"
)
})
output$all_weight <- renderValueBox({
valueBox(
paste0(max(dt$Weight), " lbs"), "Highest weight", icon = icon("weight"),
color = "orange"
)
})
output$all_Height <- renderValueBox({
valueBox(
paste0(max(dt$Height_i)," ft"), "Tallest height", icon = icon("ruler-vertical"),
color = "green"
)
})
output$all_Point <- renderValueBox({
valueBox(
max(dt$Points), "Highest point ", icon = icon("star"),
color = "blue"
)
})
output$all_Assit <- renderValueBox({
valueBox(
max(dt$Assists), "Highest assists ", icon = icon("hands-helping"),
color = "purple"
)
})
output$all_Rebounds <- renderValueBox({
valueBox(
max(dt$Rebounds), "Highest rebound", icon = icon("hands-helping"),
color = "maroon"
)
})
output$barchart<-renderPlot({
dat<-reactive({
dt %>%
group_by(Team) %>%
summarise(count = lenght(Team))%>%
arrange(desc(Sum_point))
})
ggplot(dat(),aes(x=Team,y=count))+geom_point(colour='red')})
#Team
output$mysummary = renderPrint({
summary(dt[,input$characterstic][dt$Team == input$team])
})
output$data<-renderDataTable ({
team_data <- data.frame(
Name = dt$Name[dt$Team == input$team ],
Team = input$team,
column = dt[,input$characterstic][dt$Team == input$team]
)
team_data
})
output$pieChart <- renderPlotly({
x2 <- factor(dt[, input$characterstic][dt$Team == input$team])
varicount <- reactive(
summary(x2)
)
pie_data <- data.frame(
Categorie = levels(x2),
Count = varicount()
)
plot_ly(
pie_data,
labels =  ~ Categorie,
values =  ~ Count,
type = 'pie'
)
})
output$Histogram <- renderPlot({
hist(dt$Age, breaks =  input$bins)
})
output$Player <- renderValueBox({
valueBox(
length(dt$Name[dt$Team == input$team]), "Player", icon = icon("user"),
color = "aqua"
)
})
output$Team <- renderValueBox({
valueBox(
paste0(max(dt$Salary[dt$Team == input$team])," $"), "Highest salary ", icon = icon("money-bill-alt"),
color = "yellow"
)
})
output$Age <- renderValueBox({
valueBox(
paste0(max(dt$Age[dt$Team == input$team]),"-year-old"), "Oldest player", icon = icon("calendar"),
color = "green"
)
})
output$Height <- renderValueBox({
valueBox(
paste0(max(dt$Height_i[dt$Team == input$team])," ft"), "Tallest", icon = icon("thumbs-up"),
color = "green"
)
})
output$Point <- renderValueBox({
valueBox(
max(dt$Points[dt$Team == input$team]), "Highest point ", icon = icon("star"),
color = "blue"
)
})
output$Assit <- renderValueBox({
valueBox(
max(dt$Assists[dt$Team == input$team]), "Highest assists ", icon = icon("heart"),
color = "purple"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "Demo"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
menuItem("Team", tabName = "Team", icon = icon("user-friends")),
menuItem("Detail Analysis 1",tabName = "DetailAnalysis1"),
menuItem("Detail Analysis 2",tabName = "DetailAnalysis2"),
menuItem("Detail Analysis 3",tabName = "DetailAnalysis3")
)),
dashboardBody(
tabItems(
tabItem(tabName = "Dashboard",
fluidRow(
valueBoxOutput("all_Player"),
valueBoxOutput("all_Team"),
valueBoxOutput("all_Salary")
),
fluidRow(
valueBoxOutput("all_Age"),
valueBoxOutput("all_weight"),
valueBoxOutput("all_Height")
),
fluidRow(
valueBoxOutput("all_Point"),
valueBoxOutput("all_Assit"),
valueBoxOutput("all_Rebounds")
),
fluidRow(
fluidPage(
sidebarLayout(sidebarPanel(
selectInput(
inputId = "position",
label = "Select Postion",
choices = levels(xPosition),
selected = "C"
),
selectInput(
inputId = "age",
label = "Select Age",
choices = levels(xAge),
selected = ""
),
radioButtons(
inputId = "all_characterstic",
label = "Select the characterstic for which you want the summary",
choices = c(
"Height" = "Height_i",
"Weight" = "Weight",
"Salary" = "Salary",
"Points" = "Points",
"Rebounds"="Rebounds",
"Assists" = "Assists"
),
selected = "Height_i"
)
),
mainPanel(tabsetPanel(
tabPanel("Summary", verbatimTextOutput("all_mysummary")),
tabPanel("Piechart", plotlyOutput("all_pieChart")),
))))
),
fluidRow(
box( title = "Table Data", status = "primary", height =
"800",width = "12",solidHeader = T,
column(width = 12,
DT::dataTableOutput("table"),
style = "height:700px; overflow-y: scroll;overflow-x: scroll;"
)
)
)
),
tabItem(tabName = "Team",
fluidRow(
valueBoxOutput("Player"),
valueBoxOutput("Team"),
valueBoxOutput("Age")
),
fluidRow(
valueBoxOutput("Height"),
valueBoxOutput("Point"),
valueBoxOutput("Assit")
),
fluidPage(
sidebarPanel(
selectInput(
inputId = "team",
label = "Select Team",
choices = levels(x),
selected = "Atlanta Hawks"
),
radioButtons(
inputId = "characterstic",
label = "Select the characterstic for which you want the summary",
choices = c(
"Age" = "Age",
"Height" = "Height_i",
"Weight" = "Weight",
"Salary" = "Salary",
"Points" = "Points",
"Assists" = "Assists"
),
selected = "Height_i"
)
),
mainPanel(
tabBox(width = 12,
tabPanel("Summary", verbatimTextOutput("mysummary")),
tabPanel("Piechart", plotlyOutput("pieChart")),
tabPanel("Data", DT::dataTableOutput("data"),style = "height:500px; overflow-y: scroll;overflow-x: scroll;")
)
))
),
tabItem(tabName = "DetailAnalysis1",
fluidRow(
plotlyOutput("barchart")
)
),
tabItem(tabName = "DetailAnalysis2"
),
tabItem(tabName = "DetailAnalysis3"
)
)
)
)
)
dt=read.csv("D:\\Dataset\\players.csv")
#PreProcess
dt$College[which(dt$College=="")] <- "Unknow"
dt$Salary[which(is.na(dt$Salary))] = mean(dt$Salary, na.rm=T)
dt$Salary<-format(round(dt$Salary, 0))
dt$Points[which(is.na(dt$Points))] <- mean(dt$Points, na.rm=T)
dt$Points<-format(round(dt$Points, 2))
dt$Rebounds[which(is.na(dt$Rebounds))] <-mean(dt$Rebounds, na.rm=T)
dt$Rebounds<-format(round(dt$Rebounds, 2))
dt$Assists[which(is.na(dt$Assists))] <- mean(dt$Assists, na.rm=T)
dt$Assists<-format(round(dt$Assists, 2))
#Add Column
dt$Height_cm <-(dt$Height_i*30.48)
dt$Height_cm<-format(round(dt$Height_cm, 0))
dt$Weight_kg <- (dt$Weight*0.45359237)
dt$Weight_kg<-format(round(dt$Weight_kg, 0))
#factor
x<-factor(dt$Team)
xPosition <- factor(dt$Position)
xAge <- factor(dt$Age)
runApp()
shiny::runApp()
runApp()
dt=read.csv("D:\\Dataset\\players.csv")
names(dt)
dt=read.csv("D:\\Dataset\\players.csv")
names(dt$Name)
freq <- table(dt$Name)
freq <- freq[order(freq, decreasing = TRUE)]
freq <- data.frame(freq)
names(freq)[1] <- "Players"
names(freq)[2] <- "Games"
GameScoreRegular <- freq
view(GameScoreRegular)
freq <- table(dt$Points)
freq <- freq[order(freq, decreasing = TRUE)]
freq <- data.frame(freq)
names(freq)[1] <- "Players"
names(freq)[2] <- "Games"
GameScoreRegular <- freq
view(GameScoreRegular)
freq <- freq[order(freq, decreasing = TRUE)]
freq <- table(dt$Points)
freq <- freq[order(freq, decreasing = TRUE)]
view(freq)
view(freq, n =100)
freq <- table(dt$Points)
freq <- freq[order(freq, increasing = TRUE)]
view(freq, n =100)
freq <- table(dt$Points)
freq <- freq[order(freq, increasing = FALSE)]
view(freq, n =100)
freq <- table(dt$Points)
freq <- freq[order(freq, decreasing = TRUE)]
view(freq, n =300)
attach(dt)
library("ggplot2")
dt=read.csv("D:\\Dataset\\players.csv")
attach(dt)
install.packages("ggplot2")
library("ggplot2")
dt=read.csv("D:\\Dataset\\players.csv")
attach(dt)
shiny::runApp()
dt1 <- data.frame(
name = dt$Name,
point = dt$Points
)
dt1<- dt1[order(dt1, decreasing = TRUE)]
freq <- table(dt$Points)
freq <- table(dt$Points)
str(freq)
view(freq, n =300)
freq <- table(dt$Points)
freq <- freq[order(freq, decreasing = TRUE)]
freq <- table(dt$Points)
view(freq, n =300)
freq <- freq[order(freq, decreasing = TRUE)]
view(freq, n =300)
runApp()
best =  d1 %>%
group_by(Name)%>%
summarise(Points)
view(best)
best =  dt %>%
group_by(Name)%>%
summarise(Points)
view(best)
best =  dt %>%
group_by(Name)%>%
summarise(Points)%>%
arrange(Points)
view(best)
best =  dt %>%
group_by(Name)%>%
summarise(Points)%>%
arrange(desc(Points))
view(best)
runApp()
best1 =  dt %>%
group_by(Team)%>%
summarise(Points)
view(best1)
dt$College[which(dt$College=="")] <- "Unknow"
dt$Salary[which(is.na(dt$Salary))] = mean(dt$Salary, na.rm=T)
dt$Salary<-format(round(dt$Salary, 0))
dt$Points[which(is.na(dt$Points))] <- mean(dt$Points, na.rm=T)
dt$Points<-format(round(dt$Points, 2))
dt$Rebounds[which(is.na(dt$Rebounds))] <-mean(dt$Rebounds, na.rm=T)
dt$Rebounds<-format(round(dt$Rebounds, 2))
dt$Assists[which(is.na(dt$Assists))] <- mean(dt$Assists, na.rm=T)
dt$Assists<-format(round(dt$Assists, 2))
best1 =  dt %>%
group_by(Team)%>%
summarise(Points)
view(best1)
runApp()
best1 =  dt %>%
group_by(Team)%>%
summarise(sum_Points = sum(Points))
view(best1)
best1 =  dt %>%
group_by(Team)%>%
summarise(sum_Points = sum(Points))
view(best1)
#Add Column
dt$Height_cm <-(dt$Height_i*30.48)
dt$Height_cm<-format(round(dt$Height_cm, 0))
dt$Weight_kg <- (dt$Weight*0.45359237)
dt$Weight_kg<-format(round(dt$Weight_kg, 0))
dt <- mutate(dt, Salary = as.numeric(Salary),
Points = as.numeric(Points),
Rebounds = as.numeric(Rebounds),
Assists = as.numeric(Assists),
Height_cm = as.numeric(Height_cm),
Weight_kg = as.numeric(Weight_kg)
)
runApp()
View(dt)
runApp()
best =  dt %>%
group_by(Name)%>%
summarise(Points)%>%
arrange(desc(Points))
view(best)
runApp()
bestteam =  dt %>%
group_by(Team)%>%
summarise(sum_Points = sum(Points))%>%
arrange(desc(sum_Points))
view(bestteam)
runApp()
View(bestteam)
runApp()
runApp()
ageplot =  dt %>%
group_by(Age)%>%
summarise(count = count(Age))
ageplot =  dt %>%
group_by(Age)%>%
summarise(count = count(Age))
ageplot =  dt %>%
group_by(Age)%>%
summarise(count_age = count(Age))
ageplot =  dt %>%
group_by(Age)%>%
summarise(count_age = length(Age))
View(ageplot)
runApp()
shiny::runApp()
